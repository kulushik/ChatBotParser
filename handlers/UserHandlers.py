import logging
from aiogram import types, Router, F
from aiogram.filters import Command, CommandObject
from Config import ADMIN_ID
from keyboards import ReplyKeyboard, InlineKeyboard
from .CallbackHandlers import userCallbackRout
from .CallbackData import ChangeSheduleCallbackData
from lexicon.Lexicon import weekday_names, short_weekday_names, list_settings, help_msg
from logic.Parser import load_json
from logic.Setting import get_settings, register
from datetime import date

userRout = Router()
userRout.include_router(userCallbackRout)

@userRout.message(Command(commands=['start', 'help', 'day', 'week', 'bagreport', 'setting', 'change']))
async def event_command(message: types.Message, command: CommandObject):
    logging.info(f'Username: {message.from_user.username}, id: {message.from_user.id}, –ò–º—è: {message.from_user.full_name}: {message.text}')
    # command = message.text.split()[0]
    if command.command == 'start':
        await welcome(message)
        register(message.from_user.id, message.from_user.full_name, message.from_user.username)
    elif command.command == 'help':
        await help(message)
    elif command.command == 'day':
        await day(message)
    elif command.command == 'week':
        await week(message)
    elif command.command == 'bagreport':
        await bagreport(message)
    elif command.command == 'setting':
        await setting(message)
    elif command.command == 'change':
        await change_shedule(message)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
async def welcome(message: types.Message):
    await message.answer_photo('AgACAgIAAxkDAAIBkmTkd6qjj21R2eiL_WgzLUYT70geAAK5yzEblYQoS_Aeb-xn-Zs4AQADAgADcwADMAQ', '–ô–æ—É')
    # await message.answer_photo(types.FSInputFile(r'img\statham.jpg'), '–ô–æ—É')
    await help(message)
    await replace_keyboard(message, True)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
async def help(message: types.Message):
    await message.answer(text=help_msg)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /bagreport
async def bagreport(message: types.Message):
    try:
        report = message.text.split(' ', 1)[1]
        await message.bot.send_message(chat_id = ADMIN_ID, text = f'–ë–∞–≥ —Ä–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Username: {message.from_user.username}, id: {message.from_user.id}, –ò–º—è: {message.from_user.full_name}:\n{report}')
        await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞!')
    except IndexError:
        await message.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ!\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:\n/bagreport [information]\n[information] - –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /setting
async def setting(message: types.Message):
    kb = InlineKeyboard.create_inline_kb(1, **list_settings, exit='üîö')
    await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=kb)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /change
async def change_shedule(message: types.Message):
    kb = InlineKeyboard.create_inline_kb(3, **{ChangeSheduleCallbackData(change='add', week='', day='').pack():'–î–æ–±–∞–≤–∏—Ç—å', ChangeSheduleCallbackData(change='edit', week='', day='').pack():'–ò–∑–º–µ–Ω–∏—Ç—å', ChangeSheduleCallbackData(change='delete', week='', day='').pack():'–£–¥–∞–ª–∏—Ç—å'}, exit='üîö')
    await message.answer('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\nIn developing...', reply_markup=kb)


# –°–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@userRout.message(F.text.in_({'<- –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ->'}))
async def replace_keyboard(message: types.Message, cur_week: bool = True):
    if message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ->' or cur_week == False:
        kb = ReplyKeyboard.kb_for_next_week()
        text = '–í—ã–±—Ä–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è'
    else:
        kb = ReplyKeyboard.kb_for_cur_week()
        text = '–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è'

    await message.answer(text, reply_markup=kb)


# userRout.message.register(week, F.text.regexp('(?i)^–Ω–µ–¥–µ–ª—è$'))
# userRout.message.register(week, F.text.regexp('(?i)^‚†Ä?–Ω–µ–¥–µ–ª—è‚†Ä?$'))
# userRout.message.register(day, F.text.regexp('(?i)^‚†Ä?(?:–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–¥–µ–Ω—å)‚†Ä?$'))
# userRout.message.register(day, F.text.regexp('(?i)^‚†Ä(?:–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±)‚†Ä$'))


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /day
@userRout.message(F.text.regexp('(?i)^‚†Ä?(?:–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–¥–µ–Ω—å)‚†Ä?$'))
async def day(message: types.Message):
    if '‚†Ä' in message.text:
        week = 'next_week'
        msg = message.text.replace('‚†Ä', '')
    else:
        week = 'current_week'
        msg = message.text

    if msg.lower() in ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±']:
        day = load_json(week, short_weekday_names[msg.lower()])
    else:
        day = load_json(week, weekday_names[date.today().weekday()])

    kol_msg = -1
    if day:
        if get_settings(message.from_user.id, 'day_block_messages'):
            block = '-'*20+'\n'
            for d in day[0]:
                if '—Å–µ—Ä–≤–µ—Ä–Ω–∞—è' in d.lower() and message.from_user.id != 493465069:
                    continue
                block += d+'\n'+'-'*20+'\n'
                kol_msg +=1
            if kol_msg > 0:
                await message.answer(block)
            del block
        else:
            for d in day[0]:
                if '—Å–µ—Ä–≤–µ—Ä–Ω–∞—è' in d.lower() and message.from_user.id != 493465069:
                    continue
                await message.answer('-'*20+'\n'+d+'\n'+'-'*20)
                kol_msg +=1

    if kol_msg <= 0:
        await message.answer_photo('AgACAgIAAxkBAAIBomTkjeKcONYR6fiT1tO8S4J_hA-1AAJyzDEblYQoS2ubmFWfn8OIAQADAgADcwADMAQ', '–°—Ç–∞—Ä–æ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ö–æ–¥–∏—Ç—åüòé')
        # await message.answer_photo(types.FSInputFile(r'img\today.jpg'), '–°—Ç–∞—Ä–æ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ö–æ–¥–∏—Ç—åüòé')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /week
@userRout.message(F.text.regexp('(?i)^‚†Ä?–Ω–µ–¥–µ–ª—è‚†Ä?$'))
async def week(message: types.Message):
    if '‚†Ä' in message.text:
        week = 'next_week'
    else:
        week = 'current_week'

    full_week = load_json(week)

    if get_settings(message.from_user.id, 'week_block_messages'):
        block = ''
        for row in full_week:
            block += '-'*20+'\n'
            for item in row:
                block += item+'\n'+'-'*20+'\n'
            block +='\n'
        await message.answer(block)
    else:
        for row in full_week:
            block = '-'*20+'\n'
            for item in row:
                block += item+'\n'+'-'*20+'\n'
            await message.answer(block)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@userRout.message()
async def echo(message: types.Message):
    await message.answer_photo('AgACAgIAAxkDAAIBiGTkcMPDBofITTH3C-u3Nhet6KxvAALAyzEblYQoS5BHtx_E4tkdAQADAgADcwADMAQ', '–ó–∞—á–µ–º —Ç—ã —Å—é–¥–∞ –ø–∏—à–µ—à—å? –î–µ—Ä–∂–∏ –æ–±–æ–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª :)')
    # photo = await message.answer_photo(types.FSInputFile(r'img\desktop.png'), '–ó–∞—á–µ–º —Ç—ã —Å—é–¥–∞ –ø–∏—à–µ—à—å? –î–µ—Ä–∂–∏ –æ–±–æ–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª :)')
    logging.info(f'Username: {message.from_user.username}, id: {message.from_user.id}, –ò–º—è: {message.from_user.full_name}: {message.text}')
