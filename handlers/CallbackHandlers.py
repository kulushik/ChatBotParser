from aiogram import types, Router, F
from keyboards import InlineKeyboard
from .CallbackData import SettingsCallbackData, ChangeSheduleCallbackData
from lexicon.Lexicon import list_settings
from logic.Change import check_day
from logic.Setting import set_settings


userCallbackRout = Router()

@userCallbackRout.callback_query(F.data == 'settings')
async def settings(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboard.create_inline_kb(1, **list_settings, exit='üîö')
    await callback.message.edit_text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=kb)


@userCallbackRout.callback_query(F.data == 'exit')
async def settings(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id-1)


@userCallbackRout.callback_query(F.data == 'notifications')
async def notifications(callback: types.CallbackQuery):
    kb = InlineKeyboard.create_inline_kb(2, 'üîô', **{SettingsCallbackData(category='notifications', choice=True).pack():'–î–∞‚úÖ', SettingsCallbackData(category='notifications', choice=False).pack():'–ù–µ—Ç‚ùå'})
    await callback.answer(f'–õ–æ–ª —á—Ç–æ... –Ω—É —Ç—ã –∏ —Ä–∞–∑–º–µ—á—Ç–∞–ª—Å—è(-–ª–∞—Å—å) –∫–æ–Ω–µ—á–Ω–æ...\n–¢—ã, –∫–æ–Ω–µ—á–Ω–æ, –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–æ —Ç–æ–ª–∫—É...', show_alert=True)
    await callback.message.edit_text('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', reply_markup=kb)


@userCallbackRout.callback_query(F.data == 'day_block_messages')
async def day_block_messages(callback: types.CallbackQuery):
    kb = InlineKeyboard.create_inline_kb(2, 'üîô', **{SettingsCallbackData(category='day_block_messages', choice=True).pack():'–î–∞‚úÖ', SettingsCallbackData(category='day_block_messages', choice=False).pack():'–ù–µ—Ç‚ùå'})
    await callback.answer()
    await callback.message.edit_text('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å?', reply_markup=kb)


@userCallbackRout.callback_query(F.data == 'week_block_messages')
async def week_block_messages(callback: types.CallbackQuery):
    kb = InlineKeyboard.create_inline_kb(2, 'üîô', **{SettingsCallbackData(category='week_block_messages', choice=True).pack():'–î–∞‚úÖ', SettingsCallbackData(category='week_block_messages', choice=False).pack():'–ù–µ—Ç‚ùå'})
    await callback.answer()
    await callback.message.edit_text('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é?', reply_markup=kb)


@userCallbackRout.callback_query(SettingsCallbackData.filter())
async def choice_settings(callback: types.CallbackQuery, callback_data: SettingsCallbackData):
    try:
        set_settings(callback.from_user.id, callback_data.category, callback_data.choice)
        await callback.answer('üëå')
    except:
        await callback.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /bagreport', show_alert=True)


@userCallbackRout.callback_query(ChangeSheduleCallbackData.filter((F.week == '') | (F.day == '')))
async def change_shedule(callback: types.CallbackQuery, callback_data: ChangeSheduleCallbackData):
    callback.answer()
    kb = None
    if callback_data.week == '':
        kb = InlineKeyboard.create_inline_kb(2, **{ChangeSheduleCallbackData(change=callback_data.change, week='current_week', day='').pack():'–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', ChangeSheduleCallbackData(change=callback_data.change, week='next_week', day='').pack():'–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è'}, exit='üîö')
    elif callback_data.day == '':
        if callback_data.change == 'edit' or callback_data.change == 'delete':
            days = check_day(callback_data.week)
        if callback_data.change == 'add':
            days = check_day(callback_data.week, True)
        kb = InlineKeyboard.create_inline_kb(len(days), **{ChangeSheduleCallbackData(change=callback_data.change, week=callback_data.week, day=day).pack():day for day in days}, exit='üîö')
    else:
        pass

    await callback.message.edit_text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\nIn developing...', reply_markup=kb)


@userCallbackRout.callback_query(ChangeSheduleCallbackData.filter())
async def write_shedule(callback: types.CallbackQuery, callback_data: ChangeSheduleCallbackData):
    await callback.answer('Sorry ü•∫')
    await callback.message.delete()
    await callback.bot.delete_message(callback.from_user.id, callback.message.message_id-1)

    