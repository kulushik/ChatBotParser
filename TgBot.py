from Parser import get_schedule
import Config
import logging
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime, date, time
from apscheduler.schedulers.asyncio import AsyncIOScheduler

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s', datefmt='%d-%m-%Y %H:%M:%S')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤
handler = logging.FileHandler(f'logs\\{str(date.today())}.log')
#handler.setLevel(logging.INFO)
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', '%d-%m-%Y %H:%M:%S'))
logging.getLogger('').addHandler(handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=Config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

list_command = """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
1. /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
2. /help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
3. /day - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
4. /week - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ—É—â—É—é –Ω–µ–¥–µ–ª—é
5. /bagreport [information] - C–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
"""
weekday_names = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
short_weekday_names = {'–ø–Ω':'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç':'–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä':'—Å—Ä–µ–¥–∞', '—á—Ç':'—á–µ—Ç–≤–µ—Ä–≥', '–ø—Ç':'–ø—è—Ç–Ω–∏—Ü–∞', '—Å–±':'—Å—É–±–±–æ—Ç–∞', '–≤—Å':'–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}

@dp.message_handler(commands=['start', 'help', 'day', 'week', 'bagreport'])
async def ivent_command(message: types.Message):
    logging.info(f'Username: {message.from_user.username}, id: {message.from_user.id}, –ò–º—è: {message.from_user.full_name}: {message.text}')
    command = message.text.split()[0]
    if command == '/start':
        await welcome(message)
    elif command == '/help':
        await help(message)
    elif command == '/day':
        await day(message)
    elif command == '/week':
        await week(message)
    elif command == '/bagreport':
        await bagreport(message)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
async def welcome(message: types.Message):
    with open(r'img\statham.jpg', 'rb') as photo:
        await message.answer_photo(types.InputFile(photo), '–ô–æ—É')
    await help(message)
    await replace_keyboard(message, True)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
async def help(message: types.Message):
    await message.answer(text=list_command)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /day
async def day(message: types.Message):
    if '‚†Ä' in message.text:
        cur_week = False
        message.text = message.text.replace('‚†Ä', '')
    else:
        cur_week = True

    if message.text.lower() in ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±']:
        day = get_schedule(cur_week, short_weekday_names[message.text.lower()])
    else:
        day = get_schedule(cur_week, day=weekday_names[date.today().weekday()])

    if day:
        for d in day[0]:
            await message.answer('-'*20+'\n'+d+'\n'+'-'*20)
    else:
        with open(r'img\today.jpg', 'rb') as photo:
            await message.answer_photo(types.InputFile(photo), '–°—Ç–∞—Ä–æ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ö–æ–¥–∏—Ç—åüòé')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /week
async def week(message: types.Message):
    if '‚†Ä' in message.text:
        cur_week = False
    else:
        cur_week = True

    week = get_schedule(cur_week)
    for row in week:
        block = ''
        for item in row:
            block += item+'\n'+'-'*20+'\n'
                
        await message.answer(block)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /bagreport
async def bagreport(message: types.Message):
    try:
        report = message.text.split(' ', 1)[1]
        await bot.send_message(Config.ADMIN_ID, f'–ë–∞–≥ —Ä–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Username: {message.from_user.username}, id: {message.from_user.id}, –ò–º—è: {message.from_user.full_name}:\n{report}')
        await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞!')
    except IndexError:
        await message.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ!\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:\n/bagreport [information]\n[information] - –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ')


# –°–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(content_types=types.ContentType.TEXT, text=['<- –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ->'])
async def replace_keyboard(message: types.Message, cur_week: bool = True):
    if message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ->' or cur_week == False:
        kb = types.ReplyKeyboardMarkup(keyboard=[['<- –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è'], ['‚†Ä–ü–Ω‚†Ä', '‚†Ä–í—Ç‚†Ä', '‚†Ä–°—Ä‚†Ä', '‚†Ä–ß—Ç‚†Ä', '‚†Ä–ü—Ç‚†Ä', '‚†Ä–°–±‚†Ä'], ['‚†Ä–ù–µ–¥–µ–ª—è‚†Ä']], resize_keyboard=True, input_field_placeholder='–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è:')
        text = '–í—ã–±—Ä–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è'
    else:
        kb = types.ReplyKeyboardMarkup(keyboard=[['–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ->'], ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'], ['–ù–µ–¥–µ–ª—è', '–î–µ–Ω—å']], resize_keyboard=True, input_field_placeholder='–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:')
        text = '–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è'

    await message.answer(text, reply_markup=kb)


dp.register_message_handler(week, content_types=types.ContentType.TEXT, regexp='(?i)^–Ω–µ–¥–µ–ª—è$')
dp.register_message_handler(week, content_types=types.ContentType.TEXT, regexp='(?i)^‚†Ä–Ω–µ–¥–µ–ª—è‚†Ä$')
dp.register_message_handler(day, content_types=types.ContentType.TEXT, regexp='(?i)^(?:–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–¥–µ–Ω—å)$')
dp.register_message_handler(day, content_types=types.ContentType.TEXT, regexp='(?i)^‚†Ä(?:–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±)‚†Ä$')

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def echo(message: types.Message):
    logging.info(f'Username: {message.from_user.username}, id: {message.from_user.id}, –ò–º—è: {message.from_user.full_name}: {message.text}')
    with open(r'img\desktop.png', 'rb') as photo:
        await message.answer_photo(types.InputFile(photo), '–ó–∞—á–µ–º —Ç—ã —Å—é–¥–∞ –ø–∏—à–µ—à—å? –î–µ—Ä–∂–∏ –æ–±–æ–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª')

async def print_async(text: str):
    print(text)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    # send_time = datetime.combine(datetime.today(), time(hour=10, minute=0)) # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    # scheduler.add_job(send_message, 'date', run_date=send_time, args=[chat_id, text])

    # scheduler.add_job(print_async, 'interval', minutes=1, args=['–ù—É —Ç–∏–ø –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ'])
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    # scheduler.start()

    executor.start_polling(dp, skip_updates=False)
